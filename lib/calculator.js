// Generated by CoffeeScript 1.6.3
(function() {
  var Calculator, root;

  Calculator = (function() {
    Calculator.METADATA_PER_DOCUMENT = 56;

    Calculator.OLD_METADATA_PER_DOCUMENT = 64;

    Calculator.SSD_STORAGE_TYPE = 'ssd';

    Calculator.SPINNING_STORAGE_TYPE = 'spinning';

    Calculator.DEFAULTS = {
      numOfDocuments: 1000000,
      idSize: 100,
      valueSize: 10000,
      numberOfReplicas: 1,
      workingSetPercentage: .2,
      metadataPerDocument: Calculator.METADATA_PER_DOCUMENT,
      storageType: Calculator.SSD_STORAGE_TYPE,
      highWaterMark: .7
    };

    function Calculator(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (options == null) {
        options = {};
      }
      this.options = {};
      this.options.numOfDocuments = (_ref = options.numOfDocuments) != null ? _ref : this.constructor.DEFAULTS.numOfDocuments;
      this.options.idSize = (_ref1 = options.idSize) != null ? _ref1 : this.constructor.DEFAULTS.idSize;
      this.options.valueSize = (_ref2 = options.valueSize) != null ? _ref2 : this.constructor.DEFAULTS.valueSize;
      this.options.numberOfReplicas = (_ref3 = options.numberOfReplicas) != null ? _ref3 : this.constructor.DEFAULTS.numberOfReplicas;
      this.options.workingSetPercentage = (_ref4 = options.workingSetPercentage) != null ? _ref4 : this.constructor.DEFAULTS.workingSetPercentage;
      this.options.metadataPerDocument = (_ref5 = options.metadataPerDocument) != null ? _ref5 : this.constructor.DEFAULTS.metadataPerDocument;
      this.options.storageType = (_ref6 = options.storageType) != null ? _ref6 : this.constructor.DEFAULTS.storageType;
      this.options.highWaterMark = (_ref7 = options.highWaterMark) != null ? _ref7 : this.constructor.DEFAULTS.highWaterMark;
    }

    Calculator.prototype.numberOfCopies = function() {
      return 1 + this.options.numberOfReplicas;
    };

    Calculator.prototype.totalMetadata = function() {
      return this.options.numOfDocuments * (this.options.metadataPerDocument + this.options.idSize) * this.numberOfCopies();
    };

    Calculator.prototype.totalDataset = function() {
      return this.options.numOfDocuments * this.options.valueSize * this.numberOfCopies();
    };

    Calculator.prototype.workingSet = function() {
      return this.totalDataset() * this.options.workingSetPercentage;
    };

    Calculator.prototype.clusterRamQuotaRequired = function() {
      return Math.ceil(((this.totalMetadata() + this.workingSet()) * (1 + this._overheadPercentage()) / this.options.highWaterMark) / 1000000000);
    };

    Calculator.prototype._overheadPercentage = function() {
      if (this.options.storageType.toLowerCase() === Calculator.SPINNING_STORAGE_TYPE) {
        return .30;
      } else {
        return .25;
      }
    };

    Calculator.numberOfNodesNeeded = function(ramRequired, ramPerNode) {
      if (ramPerNode === 0) {
        return;
      }
      return Math.ceil(ramRequired / ramPerNode);
    };

    return Calculator;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Calculator = Calculator;

}).call(this);
