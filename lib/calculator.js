// Generated by CoffeeScript 1.6.3
(function() {
  var Calculator, root;

  Calculator = (function() {
    Calculator.METADATA_PER_DOCUMENT = 56;

    Calculator.OLD_METADATA_PER_DOCUMENT = 64;

    Calculator.SSD_STORAGE_TYPE = 'ssd';

    Calculator.SPINNING_STORAGE_TYPE = 'spinning';

    Calculator.DEFAULTS = {
      num_of_documents: 1000000,
      id_size: 100,
      value_size: 10000,
      number_of_replicas: 1,
      working_set_percentage: .2,
      metadata_per_document: Calculator.METADATA_PER_DOCUMENT,
      storage_type: Calculator.SSD_STORAGE_TYPE,
      high_water_mark: .7
    };

    function Calculator(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (options == null) {
        options = {};
      }
      this.options = {};
      this.options.num_of_documents = (_ref = options.num_of_documents) != null ? _ref : this.constructor.DEFAULTS.num_of_documents;
      this.options.id_size = (_ref1 = options.id_size) != null ? _ref1 : this.constructor.DEFAULTS.id_size;
      this.options.value_size = (_ref2 = options.value_size) != null ? _ref2 : this.constructor.DEFAULTS.value_size;
      this.options.number_of_replicas = (_ref3 = options.number_of_replicas) != null ? _ref3 : this.constructor.DEFAULTS.number_of_replicas;
      this.options.working_set_percentage = (_ref4 = options.working_set_percentage) != null ? _ref4 : this.constructor.DEFAULTS.working_set_percentage;
      this.options.metadata_per_document = (_ref5 = options.metadata_per_document) != null ? _ref5 : this.constructor.DEFAULTS.metadata_per_document;
      this.options.storage_type = (_ref6 = options.storage_type) != null ? _ref6 : this.constructor.DEFAULTS.storage_type;
      this.options.high_water_mark = (_ref7 = options.high_water_mark) != null ? _ref7 : this.constructor.DEFAULTS.high_water_mark;
    }

    Calculator.prototype.number_of_copies = function() {
      return 1 + this.options.number_of_replicas;
    };

    Calculator.prototype.total_metadata = function() {
      return this.options.num_of_documents * (this.options.metadata_per_document + this.options.id_size) * this.number_of_copies();
    };

    Calculator.prototype.total_dataset = function() {
      return this.options.num_of_documents * this.options.value_size * this.number_of_copies();
    };

    Calculator.prototype.working_set = function() {
      return this.total_dataset() * this.options.working_set_percentage;
    };

    Calculator.prototype.cluster_ram_quota_required = function() {
      return Math.ceil(((this.total_metadata() + this.working_set()) * (1 + this._overhead_percentage()) / this.options.high_water_mark) / 1000000000);
    };

    Calculator.prototype._overhead_percentage = function() {
      if (this.options.storage_type.toLowerCase() === Calculator.SPINNING_STORAGE_TYPE) {
        return .30;
      } else {
        return .25;
      }
    };

    Calculator.number_of_nodes_needed = function(ram_required, ram_per_node) {
      if (ram_per_node === 0) {
        return;
      }
      return Math.ceil(ram_required / ram_per_node);
    };

    return Calculator;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Calculator = Calculator;

}).call(this);
